openapi: 3.0.0
info:
  title: Data Contracts for Autofront
  description: This spec outlines the contracts a backend server must fulfill for the Application to run against it successfully. The contracts are4 very dynamic so manual checking once its set up is advised. Lots of useful information is present in the schema definitions of the request body sections in this document.
  version: 1.0.0
  
paths:
  /bootstrap.json:
    get:
      summary: Retrieve the bootstrap resource for this site
      description: |-
        This endpoint is called by the front end upon loading to bootstrap the application. The application is hardcoded to load this from its base address. Its recommended this endpoint is serviced by adding a json file called bootstrap.json into the html root alongside other static assets.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bootstrap'
              example:
                basepath: http://localhost:8083
  
  /config:
    get:
      summary: Retrieve the main configuration resource for loading the site
      description: |-
        This endpoint will return the main configuration for loading the dynamic site. Refer to the schema at the bottom for what needs to be contained
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
              example:
                routes:
                - type: table
                  tableKey: exampleObject
                - type: frame
                  name: frameTest
                  displayName: IFrame Example
                  url: http://localhost:8085
                types:
                  exampleObject:
                    displayName: Example Object
                    properties:
                    - name: id
                      displayName: Id
                      summary: true
                      filterable: true
                      link: 
                        type: details
                        dataType: exampleObject
                    - name: exampleProperty
                      displayName: Id
                      link: 
                        type: table
                        dataType: aSecondType
                        targetField: id
                    actions:
                    - name: testAction
                      displayName: Test Action
                      fields:
                      - name: testActionField
                        displayName: Test Action Field
                        preset: testActionPreset
                    tableActions:
                    - name: testTableAction
                      displayName: Test Table Action
                      fields:
                      - name: freeTextField
                        displayName: Put anything you want in
                  aSecondType:
                    displayName: A Second Type
                    properties:
                    - name: id
                      displayName: Id
                      summary: true
  /actions/{type}/{actionName}:
    post:
      summary: Run an action
      description: This endpoint is called when an action is run from a table or details page. The fields are sent as a key value pair in the fields object and if from a details page the ocject currently displayed is passed as context. The backend should be able to service any action mapped in the `actions` or `tableActions` of a given type.
      parameters:
        - name: type
          in: path
          description: Type of object the action is for.
          required: true
          schema:
            type: string
        - name: actionName
          in: path
          description: Name of the action to execute.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  description: key value map of the fields set when submitting the action. The keys will align with the `fields[].name` from the config endpoint
                context:
                  type: object
                  description: if run from the details page the object that is currently displayed
      responses:
        '200':
          description: Action completed. This should return 200 even if the action itself fails (in this case success should be false).
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: was the action successful
                    type: boolean
                  message:
                    description: arbitrary message to present to the user regarding the actions result
                    type: string
                required: 
                - success
                - message

  /details/{type}/{id}:
    get:
      summary: Fetch full details for a specific object.
      description: The return type for this endpoint is completely dynamic and is expected to align with properties defined in `types[type]` for the given type in config. This endpoint is for the whole object so all properties should be present.
      parameters:
        - name: type
          in: path
          description: Type of object to fetch
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of object to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesfully retrieved full object
          content:
            application/json:
              schema:
                type: object
  /table/{type}:
    post:
      summary: Fetch tabular data for a specific type
      description: The return type will be an array of types that should match `types[type]` for the given type. for the tabular endpoint only properties configured with `summary` as true need ot be returned
      parameters:
        - name: type
          in: path
          description: Type of object to fetch
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pagination:
                  type: object
                  properties:
                    page:
                      type: integer
                      description: the target page to laod data for if the data is 'page' pagination
                    cursor:
                      type: string
                      description: the opaque cursor to load data for if the is 'nextprev' pagination
                filters:
                  description: this will be a object of the same type as the data being displayed in the table. It could be populated with any properties configured as `filterable` in the config with the filter input as a string against the property. Any properties marked as `filterable` are expected to be handled but it is up to the server how. EG exact text match vs partial or something else entirely
                  type: object
      responses:
        '200':
          description: Succesfully retrieved table data
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties:
                      type:
                        type: string
                        description: one of 'nextprev' or 'pages' depending on whether the data supports fully paged pagination or just next/prev like cursors
                      numPages:
                        type: integer
                        description: optional for 'type' == 'pages'. number of available pages
                      currentPage:
                        type: integer
                        description: required for 'type' == 'pages'. current page the data is for
                      next:
                        type: string
                        description: required for 'type' == 'nextprev'. an opaque string to go back to the api if the next page is desired 
                      prev:
                        type: string
                        description: optional for 'type' == 'nextprev'. an opaque string to go back to the api if the previous page is desired. previous button will be hidden if this isnt populated 
                  items:
                    type: array
                    items:
                      type: object
  /field/{fieldName}:
    get:
      summary: retrieve the possible values for a action field.
      description: This endpoint services action fields that should be a select field rather than a free text input. The endpoint should succeed for any `action/tableAction` fields that have the `preset` property set. the value of the preset property is what will be passed as the fieldName to this endpoint. It is not required but definately advised that the list does not return empty but a placeholder value is sent that can then be handled on submission.
      parameters:
        - name: fieldName
          in: path
          description: Name of the field enumeration to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesfully retrieved field options
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
components:
  schemas:
    Actions:
      type: array
      items: 
        type: object
        description: configuration for an action that can be submitted. name is used for api pathing so should be url safe while displayName is for the UI
        required:
        - name
        - displayName
        - properties
        properties:
          name:
            type: string
          displayName:
            type: string
          fields:
            type: array
            description: any fields the user should fill out as part of submitting out the action 
            items:
              type: object
              properties:
                name:
                  type: string
                displayName:
                  type: string
                preset:
                  description: changes the field to a select drop down populated with options by a called to the field endpoint.
                  type: string
              required:
              - name
              - displayName
    Bootstrap:
      type: object
      properties:
        basepath:
          type: string
          description: This is the url with which to base all following api calls on. Allowing the site to be drive from a different backend url.
      required:
        - basepath
    Config:
      type: object
      required:
      - routes
      - types
      properties:
        routes:
          description: list of base routes to load in the site navigation bar alongside home
          type: array
          items:
            type: object
            required:
            - type
            properties:
              type:
                type: string
                description: One of 'table' or 'frame' depending if the page is for loading an iframe or a datatable
              tableKey:
                type: string
                description: required for type == 'table' and points to which type of data this page is meant to load a table for
              name:
                type: string
                description: required for type == 'frame'. used to build the url for the page and should be all lower case and url safe
              displayName:
                type: string
                description: required for type == 'frame'. The display text for the navigation item
              url:
                type: string
                description: required for type == 'frame'. The url used to load in the iframe
        types: 
          type: object
          description: Defines the schemas, relations and actions for all the types the site should be able to render. This is a hashmap of type name to properties for the type. This documentation contains an example type.
          properties:
            exampleType:
              type: object
              required:
              - displayName
              - properties
              properties:
                displayName:
                  type: string
                properties:
                  type: array
                  description: Defines the schema for the object
                  items:
                    type: object
                    required:
                    - name
                    - displayNAme
                    properties:
                      name:
                        type: string
                      displayName:
                        type: string
                      summary:
                        description: should the property be displayed in the table
                        type: boolean
                      filterable:
                        description: should a filter be displayed for the property. The filters are displayed on the table page so usually only `summary` fields will be filterable but its doesnt have to be the case
                        type: boolean
                      link:
                        description: should the property function as a cross link to another page
                        type: object
                        required:
                        - type
                        - dataType
                        properties:
                          type:
                            type: string
                            description: should be "table" or "details" depending on if the link should go to a table for another type or a details page for this type of another.
                          dataType:
                            description: the type of object the link is for. should be a type from the config object
                            type: string
                          targetField:
                            description: if the link is a table to table link this if the field on the target type that should be prefiltered on when linking to the table
                            type: string
        actions: 
          $ref: '#/components/schemas/Actions'
        tableActions:
          $ref: '#/components/schemas/Actions'